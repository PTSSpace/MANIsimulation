<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="manisim">

	<!-- TODO: set to correct mass values
		   set to correct inertia values -->

	<xacro:property name="PI" value="3.141592654"/>
	<xacro:property name="to_scale" value="0.001"/>

	<link name="chassis">
		<xacro:property name="ch_x" value="0.484"/>
		<xacro:property name="ch_y" value="0.55472394"/>
		<xacro:property name="ch_z" value="0.19741079"/>
		<xacro:property name="ch_z_small" value="0.155"/> <!-- Entfernung von der Bodenplatte zum Start der Kamerakopfhalterung (keine Beruecksichtigung der Aufhaengung)-->
		<xacro:property name="ch_mass" value="5.08720"/>		

		<visual name="visual">
			<origin xyz="0 0 0" rpy="${PI} 0 0"/>
			<geometry>
				<mesh filename="file://$(find manisim)/manisim_description/meshes/MANI-chassis.STL" scale="${to_scale} ${to_scale} ${to_scale}"/>  
			</geometry>
		</visual>

		<collision name="collision">
                	<origin xyz="0 0 0" rpy="${PI} 0 0"/>
			<geometry>
				<mesh filename="file://$(find manisim)/manisim_description/meshes/MANI-chassis.STL" scale="${to_scale} ${to_scale} ${to_scale}"/>
			</geometry>
		</collision>
		
		<inertial>
			<origin xyz="0.049 -0.011 0.06997"/>
			<mass value="${ch_mass}"/>
			<inertia ixx="0.16953616693" 
				 ixy="0.0" 
				 ixz="0.0" 
				 iyy="0.20965106752" 
				 iyz="0.0" 
				 izz="0.36173651271"/>
		</inertial>
	</link>

	<link name="camera_pan">
		<xacro:property name="campan_x" value="0.053"/>
		<xacro:property name="campan_y" value="0.30500002"/>
		<xacro:property name="campan_z" value="0.12596426"/>
		<xacro:property name="campan_mass" value="0.19383"/>

		<visual name="visual">
			<origin xyz="0 0 0"/>
			<geometry>
				<mesh filename="file://$(find manisim)/manisim_description/meshes/MANI-cameraneck.STL" scale="${to_scale} ${to_scale} ${to_scale}"/>
			</geometry>
		</visual>

		<collision name="collision">
			<origin xyz="0 0 0"/>
                        <geometry>
                               	<mesh filename="file://$(find manisim)/manisim_description/meshes/MANI-cameraneck.STL" scale="${to_scale} ${to_scale} ${to_scale}"/>
                        </geometry>
		</collision>

		<inertial>
			<origin xyz="${0} ${0.01875} ${0.05327+0.0027}"/>
			<mass value="${campan_mass}"/>
			<inertia ixx="0.00206409570" 
                                 ixy="0" 
                                 ixz="0" 
                                 iyy="0.00022456304" 
                                 iyz="0" 
                                 izz="0.00197815557"/>
		</inertial>
	</link>

	<link name="camera_tilt">
		<xacro:property name="camtilt_x" value="0.053"/>
		<xacro:property name="camtilt_y" value="0.088"/>
		<xacro:property name="camtilt_z" value="0.203"/>
		<xacro:property name="camtilt_mass" value="0.15711"/>

		<visual name="visual">
			<origin xyz="0 0 0"/>
			<geometry>
				<mesh filename="file://$(find manisim)/manisim_description/meshes/MANI-camerahead.STL" scale="${to_scale} ${to_scale} ${to_scale}"/>
			</geometry>
		</visual>
		
		<collision name="collision">
			<origin xyz="0 0 0"/>
			<geometry>
				<mesh filename="file://$(find manisim)/manisim_description/meshes/MANI-camerahead.STL" scale="${to_scale} ${to_scale} ${to_scale}"/>
			</geometry>
		</collision>

		<inertial>
			<origin xyz="0.0023 0.00329 -0.09749"/>
			<mass value="${camtilt_mass}"/>
			<inertia ixx="0.1"
				 ixy="0"
				 ixz="0"
				 iyy="0.1"
				 iyz="0"
				 izz="0.1"/>
			<!--<inertia ixx="0.00066943623"
				 ixy="0"
				 ixz="0"
				 iyy="0.00059406871"
				 iyz="0"
				 izz="0.00019343440"/>-->			
		</inertial>
	</link>

	<link name="camera_kinect">
		<visual>
			<geometry>
				<box size="0.01 0.01 0.01"/>
			</geometry>
		</visual>
		
		<collision>
			<geometry>
                                <box size="0.01 0.01 0.01"/>
                        </geometry>
		</collision>

		<inertial>
			<mass value="0.00001"/>
			<inertia ixx="0.001"	
				 ixy="0.0"
				 ixz="0.0"
				 iyy="0.001"
				 iyz="0.0"
				 izz="0.001"/>
		</inertial>
	</link>

	<!-- steering angles -->
	<xacro:property name="sa_x" value="0.044"/>
        <xacro:property name="sa_y" value="0.121"/>
        <xacro:property name="sa_z" value="0.130"/>
        <xacro:property name="sa_mass" value="1.38934"/>
	<xacro:macro name="steering_angle" params="name *visual_origin *collision_origin *inertial_origin"> 
		<link name="steering_angle_${name}">
                	<visual name="visual">
                    		<xacro:insert_block name="visual_origin"/>
                        	<geometry>
                                	<mesh filename="file://$(find manisim)/manisim_description/meshes/MANI-steeringangle.STL" scale="${to_scale} ${to_scale} ${to_scale}"/>
                        	</geometry>
                	</visual>

               		<collision name="collision">
                        	<xacro:insert_block name="collision_origin"/>
                        	<geometry>
                            		<mesh filename="file://$(find manisim)/manisim_description/meshes/MANI-steeringangle.STL" scale="${to_scale} ${to_scale} ${to_scale}"/>
                             </geometry>
                	</collision>

                	<inertial>
				<xacro:insert_block name="inertial_origin"/>
				<mass value="${sa_mass}"/> 
				<inertia ixx="0.00388673246" 
                         		 ixy="0" 
                         		 ixz="0" 
                         		 iyy="0.00452103693" 
                         		 iyz="0" 
                         		 izz="0.00314148630"/>
         		</inertial>
        	</link>
	</xacro:macro>

	<steering_angle name="frontleft">
		<origin xyz="0 0 0"/>
		<origin xyz="0 0 0"/>
		<origin xyz="0.03331 0 -0.07985"/>
	</steering_angle>

	<steering_angle name="rearleft">
		<origin xyz="0 0 0"/>
		<origin xyz="0 0 0"/>
		<origin xyz="0.03331 0 -0.07985"/>
	</steering_angle>

	<steering_angle name="rearright">
            	<origin xyz="0 0 0"/>
                <origin xyz="0 0 0"/>
                <origin xyz="0.03331 0 -0.07985"/>
        </steering_angle>

	<steering_angle name="frontright">
               	<origin xyz="0 0 0"/>
		<origin xyz="0 0 0"/>
                <origin xyz="0.03331 0 -0.07985"/>
        </steering_angle>

	<!-- wheels -->
	<xacro:property name="wh_length" value="0.115"/>
        <xacro:property name="wh_radius" value="${0.13677/2}"/>
        <xacro:property name="wh_mass" value="0.57134"/>
	<xacro:macro name="wheel" params="name *visual_origin *collision_origin *inertial_origin">
		<link name="wheel_${name}">
                	<visual name="visual">
				<xacro:insert_block name="visual_origin"/>
                        	<geometry>
                                	<mesh filename="file://$(find manisim)/manisim_description/meshes/MANI-wheel.STL" scale="${to_scale} ${to_scale} ${to_scale}"/>
                        	</geometry>
                	</visual>

                	<collision name="collision">
                        	<xacro:insert_block name="collision_origin"/>
                       		<geometry>
                            <!--    	<mesh filename="file://$(find mani)/mani_description/meshes/MANI-wheel.STL" scale="${to_scale} ${to_scale} ${to_scale}"/>
                        -->
					<cylinder length="${wh_length}" radius="${wh_radius}"/>
				</geometry>
                	</collision>

                	<inertial>
				<xacro:insert_block name="inertial_origin"/>
                        	<mass value="${wh_mass}"/>				
				<inertia ixx="0.001666" 
                         		 ixy="0" 
                         		 ixz="0" 
                         		 iyy="0.001666" 
                         		 iyz="0" 
                         		 izz="0.00232452729"/>
<!--
				<inertia ixx="0.1" 
                                         ixy="0" 
                                         ixz="0" 
                                         iyy="0.1" 
                                         iyz="0" 
                                         izz="0.1"/> -->
	            	</inertial>
        	</link>
	</xacro:macro>

	<!-- < x(=x), z(=y), y(=-z) > -->
	<wheel name="frontleft">
		<origin xyz="0 0 0" rpy="0 ${PI} 0"/> 	<!-- visual -->
		<origin xyz="0 0 0" rpy="0 ${PI} 0"/>	<!-- collision -->
		<origin xyz="0 0 0"/> 			<!-- inertial -->
	</wheel>

	<wheel name="rearleft">
	      	<origin xyz="0 0 0" rpy="0 ${PI} 0"/>
		<origin xyz="0 0 0" rpy="0 ${PI} 0"/>
		<origin xyz="0 0 0"/>
        </wheel>

	<wheel name="rearright">
               	<origin xyz="0 0 0" rpy="0 0 0"/>
		<origin xyz="0 0 0" rpy="0 0 0"/>
		<origin xyz="0 0 0"/>
        </wheel>

	<wheel name="frontright">
       		<origin xyz="0 0 0" rpy="0 0 0"/>
		<origin xyz="0 0 0" rpy="0 0 0"/>
                <origin xyz="0 0 0"/>
        </wheel>

	<!-- camera head 60-60 grad-->
	<joint name="cam_pan" type="revolute"> <!-- revolute -->
		<parent link="chassis"/>
		<child link="camera_pan"/>
		<limit effort="100.0" lower="-1.0472" upper="1.0472" velocity="10"/>
		<axis xyz="0 0 1"/>
		<origin xyz="${ch_x/2-campan_x/2+0.0025003} 0 ${ch_z_small}" rpy="0 0 0"/>
	</joint>

	<!-- dz/dy describe the distances between tilt and pan on the left side (where the actuator is)-->
	<xacro:property name="campan_dz" value="0.09846"/>
	<xacro:property name="campan_dy" value="0.097975"/>
	<joint name="cam_tilt" type="revolute">
		<parent link="camera_pan"/>
		<child link="camera_tilt"/>
		<limit effort="100.0" lower="-${PI/2}" upper="${PI/2}" velocity="10"/>
		<axis xyz="0 0 1"/>
		<origin xyz="0 ${campan_dy} ${campan_dz}" rpy="${-PI/2} ${PI} 0"/>
	</joint>

	<joint name="cam_kinect" type="fixed">
		<parent link="camera_tilt"/>
		<child link="camera_kinect"/>
		<origin xyz="${-camtilt_x/2+0.005} 0 ${-camtilt_z/2}" rpy="${-PI/2} ${PI} 0"/>
	</joint>

	<!-- steering angles -->
	<!-- f: front, b: back, l: left, r: right-->
	<xacro:property name="steering_max_vel" value="0.75"/>
	<xacro:macro name="steer" params="joint_name pos *origin">
		<joint name="${joint_name}" type="revolute"> <!-- revolute -->
			<parent link="chassis"/>
                	<child link="steering_angle_${pos}"/>
                	<limit effort="100.0" lower="-${PI/2}" upper="${PI/2}" velocity="${steering_max_vel}"/>
                	<axis xyz="0 0 1"/>
               		<xacro:insert_block name="origin"/>
		</joint>
	</xacro:macro>

<!-- 	- the dx/dy/dz values describe the distance from the outer edge of the chassis to the point where the steering angles should be mounted 
	- there are different left/right values for dy and dz because the CAD model isn't perfectly accurate
	- the ..._correction values are necessary because the origin of the CAD model isn't exactly in the middle and I didn't want to annoy Lasse anymore to make it 100% accurate -->
	<xacro:property name="ch_dx" value="0.024"/>
	<xacro:property name="ch_dy_left" value="0.05402373"/>
	<xacro:property name="ch_dy_right" value="0.05399998"/>
	<xacro:property name="ch_dz_left" value="0.00217442"/>
	<xacro:property name="ch_dz_right" value="0.0027"/>
	<xacro:property name="ch_x_correction" value="0.00039999"/>
	<xacro:property name="ch_y_correction" value="0.00074725"/>

	<steer joint_name="steer_1_fl" pos="frontleft">
                <origin xyz="${(ch_x/2+ch_x_correction)-ch_dx} ${(ch_y/2+ch_y_correction)-ch_dy_left} ${ch_z_small-ch_z+ch_dz_left}" rpy="0 0 ${-PI/2}"/>
        </steer>
	
	<steer joint_name="steer_2_rl" pos="rearleft">
                <origin xyz="${-(ch_x/2-ch_x_correction)+ch_dx} ${(ch_y/2+ch_y_correction)-ch_dy_left} ${ch_z_small-ch_z+ch_dz_left}" rpy="0 0 ${-PI/2}"/>
        </steer>

	<steer joint_name="steer_3_rr" pos="rearright">
                <origin xyz="${-(ch_x/2-ch_x_correction)+ch_dx} ${-(ch_y/2-ch_y_correction)+ch_dy_right} ${ch_z_small-ch_z+ch_dz_right}" rpy="0 0 ${PI/2}"/>
        </steer>

	<steer joint_name="steer_4_fr" pos="frontright">
		<origin xyz="${(ch_x/2+ch_x_correction)-ch_dx} ${-(ch_y/2-ch_y_correction)+ch_dy_right} ${ch_z_small-ch_z+ch_dz_right}" rpy="0 0 ${PI/2}"/>
	</steer>

	<!-- wheels -->
	<xacro:macro name="drive" params="joint_name pos *origin">
		<joint name="${joint_name}" type="continuous"> <!-- continuous -->
			<parent link="steering_angle_${pos}"/>
			<child link="wheel_${pos}"/>
			<axis xyz="0 0 1"/>
			<xacro:insert_block name="origin"/>
		</joint>
	</xacro:macro>

	<xacro:property name="sa_dx" value="0.009"/>
	<xacro:property name="sa_dz" value="0.102"/>
`	<xacro:property name="dist_sa_to_w" value="0.004"/> <!-- Abstand Lenkwinkel zu Rad -->

	<drive joint_name="drive_1_fl" pos="frontleft">
		<origin xyz="${sa_dx-dist_sa_to_w} ${0} ${-sa_dz}" rpy="0 ${-PI/2} 0"/>
	</drive>


	<drive joint_name="drive_2_rl" pos="rearleft">
                <origin xyz="${sa_dx-dist_sa_to_w} ${0} ${-sa_dz}" rpy="0 ${-PI/2} 0"/>
        </drive>

	<drive joint_name="drive_3_rr" pos="rearright">
                <origin xyz="${sa_dx-dist_sa_to_w} ${0} ${-sa_dz}" rpy="0 ${PI/2} 0"/>
        </drive>

	<drive joint_name="drive_4_fr" pos="frontright">
                <origin xyz="${sa_dx-dist_sa_to_w} ${0} ${-sa_dz}" rpy="0 ${PI/2} 0"/>
        </drive>

	<!-- transmission -->
        <!-- move camera neck/head --> 
	<transmission name="transm_camera_pan">
		<type>transmission_interface/SimpleTransmission</type>
		<joint name="cam_pan">
			<hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
		</joint>
		<actuator name="motor_camera_pan">
			<hardwareInterface>EffortJointInterface</hardwareInterface>
			<mechanicalReduction>1</mechanicalReduction>
		</actuator>
	</transmission>

	<transmission name="transm_camera_tilt">
		<type>transmission_interface/SimpleTransmission</type>
		<joint name="cam_tilt">
			<hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
		</joint>
		<actuator name="motor_camera_tilt">
			<hardwareInterface>EffortJointInterface</hardwareInterface>
			<mechanicalReduction>1</mechanicalReduction>
		</actuator>
	</transmission>

	<!-- move steering angles -->
	<transmission name="transm_steer_fl">
		<type>transmission_interface/SimpleTransmission</type>
		<joint name="steer_1_fl">
			<hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
		</joint>
		<actuator name="motor_steer_fl">
			<hardwareInterface>EffortJointInterface</hardwareInterface>
                        <mechanicalReduction>1</mechanicalReduction>
		</actuator>
	</transmission>

	<transmission name="transm_steer_rl">
                <type>transmission_interface/SimpleTransmission</type>
                <joint name="steer_2_rl">
                        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
                </joint>
                <actuator name="motor_steer_rl">
                        <hardwareInterface>EffortJointInterface</hardwareInterface>
                        <mechanicalReduction>1</mechanicalReduction>
                </actuator>
        </transmission>

	<transmission name="transm_steer_rr">
                <type>transmission_interface/SimpleTransmission</type>
                <joint name="steer_3_rr">
                        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
                </joint>
                <actuator name="motor_steer_rr">
                        <hardwareInterface>EffortJointInterface</hardwareInterface>
                        <mechanicalReduction>1</mechanicalReduction>
                </actuator>
        </transmission>

	<transmission name="transm_steer_fr">
                <type>transmission_interface/SimpleTransmission</type>
                <joint name="steer_4_fr">
                        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
                </joint>
                <actuator name="motor_steer_fr">
                        <hardwareInterface>EffortJointInterface</hardwareInterface>
                        <mechanicalReduction>1</mechanicalReduction>
                </actuator>
        </transmission>

	<!-- move wheels --> 
	<transmission name="transm_wheel_fl">
		<type>transmission_interface/SimpleTransmission</type>
		<joint name="drive_1_fl">
			<hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
		</joint>
		<actuator name="motor_wheel_fl">
			<hardwareInterface>VelocityJointInterface</hardwareInterface>
			<mechanicalReduction>1</mechanicalReduction>
		</actuator>
	</transmission>

	<transmission name="transm_wheel_rl">
		<type>transmission_interface/SimpleTransmission</type>
		<joint name="drive_2_rl">
			<hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
		</joint>
		<actuator name="motor_wheel_rl">
			<hardwareInterface>VelocityJointInterface</hardwareInterface>
			<mechanicalReduction>1</mechanicalReduction>
		</actuator>
	</transmission>

	<transmission name="transm_wheel_rr">
                <type>transmission_interface/SimpleTransmission</type>
                <joint name="drive_3_rr">
                        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
                </joint>
                <actuator name="motor_wheel_rr">
                        <hardwareInterface>VelocityJointInterface</hardwareInterface>
                        <mechanicalReduction>1</mechanicalReduction>
                </actuator>
        </transmission>

        <transmission name="transm_wheel_fr">
                <type>transmission_interface/SimpleTransmission</type>
                <joint name="drive_4_fr">
                        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
                </joint>
                <actuator name="motor_wheel_fr">
                        <hardwareInterface>VelocityJointInterface</hardwareInterface>
                        <mechanicalReduction>1</mechanicalReduction>
                </actuator>
        </transmission>

	<!-- plugins -->
        <gazebo>
                <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
		<robotNamespace>/manisim</robotNamespace>
		<robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
		<legacyModeNS>true</legacyModeNS>
                </plugin>
        </gazebo>

	<!-- stereo camera -->
<!--
	<gazebo reference="camera_tilt">
    <sensor type="multicamera" name="stereo_camera">
      <update_rate>30.0</update_rate>
      <camera name="left">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <camera name="right">
        <pose>0 -0.07 0 0 0 0</pose>
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="stereo_camera_controller" filename="libgazebo_ros_multicamera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>multisense_sl/camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>left_camera_optical_frame</frameName>
        <!- -<rightFrameName>right_camera_optical_frame</rightFrameName>- ->
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>

	<visualize>true</visualize>
    </sensor>
  </gazebo>

-->
	<!-- kinect depth camera -->
	<gazebo reference="camera_kinect">
		 <sensor name="camera" type="depth">
	<update_rate>20</update_rate>
        <camera>
          <horizontal_fov>1.047198</horizontal_fov>
          <image>
            <width>640</width>
            <height>480</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.05</near>
            <far>3</far>
          </clip>
        </camera>

        <plugin name="camera_plugin" filename="libgazebo_ros_openni_kinect.so">
          <baseline>0.2</baseline>
          <alwaysOn>true</alwaysOn>
          <!-- Keep this zero, update_rate in the parent <sensor> tag
            will control the frame rate. -->
          <updateRate>0.0</updateRate>
          <cameraName>camera_ir</cameraName>
          <imageTopicName>/camera/depth/image_raw</imageTopicName>
          <cameraInfoTopicName>/camera/depth/camera_info</cameraInfoTopicName>
          <depthImageTopicName>/camera/depth/image_raw</depthImageTopicName>
          <depthImageInfoTopicName>/camera/depth/camera_info</depthImageInfoTopicName>
          <pointCloudTopicName>/camera/depth/points</pointCloudTopicName>
          <frameName>camera_link</frameName>
          <pointCloudCutoff>0.05</pointCloudCutoff>
          <distortionK1>0</distortionK1>
          <distortionK2>0</distortionK2>
          <distortionK3>0</distortionK3>
          <distortionT1>0</distortionT1>
          <distortionT2>0</distortionT2>
          <CxPrime>0</CxPrime>
          <Cx>0</Cx>
          <Cy>0</Cy>
          <focalLength>0</focalLength>
          <hackBaseline>0</hackBaseline>
	</plugin>
      </sensor>
	</gazebo>

	<gazebo>
		<static>false</static>
	</gazebo>
</robot>
